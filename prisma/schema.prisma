// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  price       Decimal     @db.Decimal(10, 2)
  image       String
  description String?
  styles      Style[]
  sizes       Size[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Style {
  id        Int      @id @default(autoincrement())
  name      String   // e.g., "Black", "Navy", "Olive"
  image     String
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
}

model Size {
  id        Int      @id @default(autoincrement())
  name      String   // e.g., "S", "M", "L", "XL"
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
}

model Cart {
  id        String     @id @default(uuid()) // Using UUID for anonymous carts
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  size      String
  style     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cartId])
  @@index([productId])
}

model Order {
  id              String          @id @default(uuid())
  orderNumber     String          @unique
  customerId      String?
  email           String
  firstName       String
  lastName        String
  shippingAddress ShippingAddress?
  items           OrderItem[]
  subtotal        Decimal         @db.Decimal(10, 2)
  shipping        Decimal         @db.Decimal(10, 2)
  tax             Decimal         @db.Decimal(10, 2)
  total           Decimal         @db.Decimal(10, 2)
  status          OrderStatus     @default(PENDING)
  paymentIntentId String?         @unique
  shippingMethod  ShippingMethod
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  size      String
  style     String
  name      String
  image     String

  @@index([orderId])
  @@index([productId])
}

model ShippingAddress {
  id            Int      @id @default(autoincrement())
  orderId       String   @unique
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  address       String
  addressLine2  String?
  city          String
  state         String
  zipCode       String
  country       String   @default("United States")
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum ShippingMethod {
  STANDARD
  EXPRESS
}
